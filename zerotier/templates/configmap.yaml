apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "zerotier.fullname" . }}
  labels:
    app: {{ template "zerotier.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  zt_networks: |
    #!/bin/bash

    set -e
    _nat() {
        local networks=$(zerotier-cli listnetworks | grep -o -E '([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$')
        local eth0_ipaddr=$(ip a show eth0 | grep 'inet ' | xargs | cut -d' ' -f2 | cut -d'/' -f1)
        local anywhere="0.0.0.0/0"

        for net in ${networks[*]}
        do
            eval iptables -t nat -A POSTROUTING -s $net -o eth0 -j SNAT --to-source $eth0_ipaddr
            eval iptables -A FORWARD -s $net -d $anywhere -j ACCEPT
            eval iptables -A FORWARD -s $anywhere -d $net -j ACCEPT
        done

        iptables-save
    }

    mkdir -p /var/lib/zerotier-one/networks.d
    {{- range .Values.zt_networks }}
    touch /var/lib/zerotier-one/networks.d/{{ . }}.conf
    {{- end }}
    zerotier-one -d -U
    sleep 10
    {{- if .Values.nat }}
    until [[ $(zerotier-cli listnetworks | grep -o -E '([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$') ]]; do
        sleep 10
    done
    _nat
    {{- end}}
    while [[ $(ps aux | grep -i '[z]erotier') ]];do zerotier-cli listnetworks | grep OK && sleep 60;done
